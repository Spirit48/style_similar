"""
Django settings for ver4_24 project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path # pathlib를 이용해서 경로 지정
import os # 운영체제에서 제공되는 여러 기능을 파이썬에서 수행시켜주는 파이썬 라이브러리(모듈)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# 현재 프로젝트 파일의 루트폴더의 위치를 의미하며 파이썬 3.4부터 빌트인(built-in) 모듈에 포함된 pathlib로 사용되며 이전 버전은 os.path를 사용했음
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY는 장고 웹서버에서 인증이 필요한 부분에 사용되는 비밀키로 서비스 제공시 절대 노출되어서는 안되는 값이며 다른 파일로 따로 빼서 관리할 수 있음
SECRET_KEY = 'django-insecure-3_!l+7(47haj*mf(ht713)r_5y32dl5)3^(sfe364qs80d=k5l'

# SECURITY WARNING: don't run with debug turned on in production!
# Django 에러 발생 시 에러 화면정보 표시여부로 배포 후엔 False 로 설정
# DEBUG = False 후 runserver로 실행하면 settings에 있는 STATIC과 MEDIA 폴더 경로를 사용할 수 없게되기 때문에 템플릿 html에 css가 적용되지 않아 페이지가 제대로 표시되지 않으므로 이 경로를 사용할 수 있도록 조치 후 배포 필요
DEBUG = True

ALLOWED_HOSTS = ['*'] # 접속을 허용할 호스트(도메인) 등록


# Application definition

INSTALLED_APPS = [
    # 기본 설치 앱
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'contents',

    # 개발자 설치 앱
]

# Django의 요청 / 응답 처리에 대한 후크 프레임 워크로써 Django 상의 모든 API 입출력을 전역적으로 변경하기 위한 low-level의 플러그인 시스템
MIDDLEWARE = [
    # 기본 설치 순서가 뒤바뀌면 안됨
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 개발자 Customizing
]

ROOT_URLCONF = 'config.urls' # 기준이 되는 URL파일 경로

# Django에서 제공하는 템플릿 기능 정의
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # template directory 경로 설정
        'APP_DIRS': True, # Django가 Django App 안의 templates 폴더에서 템플릿들을 찾을 것인지의 여부 설정
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# 웹 서버에 동적 요청이 발생 시 웹 서버가 WSGI 서버를 호출, WSGI 서버는 파이썬 프로그램을 호출하여 동적 페이지 요청 처리
WSGI_APPLICATION = 'config.wsgi.application' # config의 wsgi.py 위치 정의


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # MariaDB를 사용하는 경우
        'NAME': 'style_similar',               # 데이터베이스 이름
        'USER': 'style_similar',               # 데이터베이스 사용자 이름
        'PASSWORD': 'tmxkdlftlalffj9446!!',       # 데이터베이스 비밀번호
        'HOST': '192.168.0.100',                  # 데이터베이스 호스트 주소
        'PORT': '3306',                       # 데이터베이스 포트 번호 (기본: 3306)
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        # username과 비밀번호가 유사한지 확인
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # 비밀번호의 최소 자리수(default)를 지정
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # commmon한 비밀번호(ex. qwer) 1000개의 리스트와 비교
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # 전부 숫자인 비밀번호는 사용하지 못하게 제어
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us' # 웹페이지 언어 설정 변수

TIME_ZONE = 'Asia/Seoul' # 시스템 시간대 설정. 기본 설정 'UTC'는 한국시간의 -9시간인 그리니치 시간대이므로 한국시간대 'Asia/Seoul'로 지정

USE_I18N = True # Django 번역 시스템 활성화 여부 설정. I18N은 국제화(Internationalization) 약자

USE_TZ = True # Timezone의 사용 여부 설정


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/' # static 파일 경로 지정
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # static 폴더에 파일들을 넣고 사용하기 위해 static 파일들을 찾는 경로를 나타내는 STATICFILES_DIRS 라는 변수를 추가 설정

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
# 자동생성 필드의 BigAutoField 사용. Django에서 모델을 생성하고 migrate를 진행하면 테이블의 pk로 ID가 auto_increament key로 자동생성
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
